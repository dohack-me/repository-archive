# AUTOGENERATED FROM:
#     'queries/authenticate_user.edgeql'
#     'queries/create_post.edgeql'
#     'queries/create_user.edgeql'
#     'queries/get_posts.edgeql'
#     'queries/get_user.edgeql'
#     'queries/user_exists.edgeql'
# WITH:
#     $ edgedb-py --target blocking --file ./generated_edgeql.py


from __future__ import annotations
import dataclasses
import edgedb
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_validators__(cls):
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class AuthenticateUserResult(NoPydanticValidation):
    id: uuid.UUID
    username: str


@dataclasses.dataclass
class CreatePostResult(NoPydanticValidation):
    id: uuid.UUID


@dataclasses.dataclass
class CreateUserResult(NoPydanticValidation):
    id: uuid.UUID


@dataclasses.dataclass
class GetPostsResult(NoPydanticValidation):
    id: uuid.UUID
    title: str
    body: bytes


def authenticate_user(
    executor: edgedb.Executor,
    *,
    username: str,
    password: str,
) -> AuthenticateUserResult | None:
    return executor.query_single(
        """\
        select User {
            id, username
        }
        filter .username = <str>$username 
        and .password = ext::pgcrypto::crypt(<str>$password, .password)\
        """,
        username=username,
        password=password,
    )


def create_post(
    executor: edgedb.Executor,
    *,
    title: str,
    body: bytes,
    author_id: uuid.UUID,
) -> CreatePostResult:
    return executor.query_single(
        """\
        insert Post {
            title := <str>$title,
            body := <bytes>$body,
            author := (select User filter .id = <uuid>$author_id)
        }\
        """,
        title=title,
        body=body,
        author_id=author_id,
    )


def create_user(
    executor: edgedb.Executor,
    *,
    username: str,
    password: str,
) -> CreateUserResult:
    return executor.query_single(
        """\
        insert User {
            username := <str>$username,
            password := ext::pgcrypto::crypt(<str>$password, ext::pgcrypto::gen_salt())
        }\
        """,
        username=username,
        password=password,
    )


def get_posts(
    executor: edgedb.Executor,
) -> list[GetPostsResult]:
    return executor.query(
        """\
        select Post {title, body}
        filter .author = global current_user\
        """,
    )


def get_user(
    executor: edgedb.Executor,
    *,
    username: str,
) -> AuthenticateUserResult | None:
    return executor.query_single(
        """\
        select User {
            id,
            username
        } filter .username = <str>$username\
        """,
        username=username,
    )


def user_exists(
    executor: edgedb.Executor,
    *,
    username: str,
) -> bool:
    return executor.query_single(
        """\
        select exists (select User filter .username = <str>$username)\
        """,
        username=username,
    )
